{"meta":{"title":"Bowiego的啵客儿","subtitle":"龟速建设ing","description":null,"author":"Bowiego \"啵一哥\"","url":"http://bowiego.github.io"},"pages":[{"title":"标签","date":"2016-06-30T07:01:19.000Z","updated":"2016-06-30T07:09:10.000Z","comments":false,"path":"tags/index.html","permalink":"http://bowiego.github.io/tags/index.html","excerpt":"","text":"生活"}],"posts":[{"title":"PostCSS简介","slug":"PostCSS","date":"2017-08-09T12:30:53.000Z","updated":"2017-08-09T15:50:19.000Z","comments":true,"path":"2017/08/09/PostCSS/","link":"","permalink":"http://bowiego.github.io/2017/08/09/PostCSS/","excerpt":"","text":"1、什么是PostCSS (A tool for transforming CSS with JavaScript) PostCSS 本身是一个功能比较单一的工具。它提供了一种方式用 JavaScript 代码来处理 CSS。它负责把 CSS 代码解析成抽象语法树结构（Abstract Syntax Tree，AST），再交由插件来进行处理。插件基于 CSS 代码的 AST 所能进行的操作是多种多样的，比如可以支持变量和混入（mixin），增加浏览器相关的声明前缀，或是把使用将来的 CSS 规范的样式规则转译（transpile）成当前的 CSS 规范支持的格式。从这个角度来说，PostCSS 的强大之处在于其不断发展的插件体系。目前 PostCSS 已经有 200 多个功能各异的插件。开发人员也可以根据项目的需要，开发出自己的 PostCSS 插件。 PostCSS 从其诞生之时就带来了社区对其类别划分的争议。这主要是由于其名称中的 post，很容易让人联想到 PostCSS 是用来做 CSS 后处理（post-processor）的，从而与已有的 CSS 预处理（pre-processor）语言，如 SASS 和 LESS 等进行类比。实际上，PostCSS 的主要功能只有两个：第一个就是前面提到的把 CSS 解析成 JavaScript 可以操作的 AST，第二个就是调用插件来处理 AST 并得到结果。因此，不能简单的把 PostCSS 归类成 CSS 预处理或后处理工具。PostCSS 所能执行的任务非常多，同时涵盖了传统意义上的预处理和后处理。 如果你喜欢使用PostCSS，但又不想抛弃你最喜欢的预处理器。不用担心，你不需要作出二选一的选择，你可以把PostCSS和预处理器(Sass、Stylus或LESS)结合起来使用。 2、为什么要用PostCSS 多样化的功能插件，创建了一个生态的插件系统 根据你需要的特性进行模块化 快速编译 创建自己的插件，且具可访问性 可以像普通的CSS一样使用它 不依赖于任何预处理器就具备创建一个库的能力 可以与许多流行工具构建无缝部署 3、webpack设置 首先安装： npm install postcss-loader -D webpack &gt;3.0版本貌似不需要在配置文件中\b配置postcss的loader了，而是直接生效。也许是postcss新版的功能，\b但是官方文档没有说明，这点注意。 之后会在项目根目录下多处一个.postcssrc.js文件，以后在该文件中修改postcss配置 module.exports = { &quot;plugins&quot;: { &quot;autoprefixer&quot;: { browsers: [&apos;last 2 versions&apos;, &apos;ie 6-8&apos;, &apos;Firefox &gt; 20&apos;] }, &quot;postcss-px-to-viewport&quot;: { viewportWidth: 750, viewportHeight: 1334, unitPrecision: 5, viewportUnit: &apos;vw&apos;, selectorBlackList: [], minPixelValue: 1, mediaQuery: false } } } 2、PostCSS插件 PostCSS的核心就是它的插件系统。目前，PostCSS已经拥有200多个插件可供选择，官方的Github上有一个插件仓库,其主页维护了插件列表。这个插件列表会经常更新，所以说这个地方是一个相当可靠的地方，可以看到插件的发展，在哪方面可用。 下面列举一些常用的插件： Autoprefixer 根据CanIUse.com数据对属性自动添加浏览器的私有前缀. npm install autoprefixer -D input: :fullscreen a { display: flex } output: :-webkit-full-screen a { display: -webkit-box; display: flex } :-moz-full-screen a { display: flex } :-ms-fullscreen a { display: -ms-flexbox; display: flex } :fullscreen a { display: -webkit-box; display: -ms-flexbox; display: flex } cssnano 模块化的CSS压缩器,它提供了一个非常强大的CSS优化的插件包cssnano，这个插件包是一个可以即插即用的。它汇集了大约25个插件，只需要执行一个命令，就可以做多方面不同类型的优化。它包括： 删除空格和最后一个分号 删除注释 优化字体权重 丢弃重复的样式规则 优化calc() 压缩选择器 减少手写属性 合并规则 1npm install cssnano -D before:1234567891011121314151617181920/* normalize selectors */h1::before, h1:before &#123; /* reduce shorthand even further */ margin: 10px 20px 10px 20px; /* reduce color values */ color: #ff0000; /* remove duplicated properties */ font-weight: 400; font-weight: 400; /* reduce position values */ background-position: bottom right; /* normalize wrapping quotes */ quotes: &apos;«&apos; &quot;»&quot;; /* reduce gradient parameters */ background: linear-gradient(to bottom, #ffe500 0%, #ffe500 50%, #121 50%, #121 100%); /* replace initial values */ min-width: initial;&#125;/* correct invalid placement */@charset &quot;utf-8&quot;; after:1@charset &quot;utf-8&quot;;h1:before&#123;margin:10px 20px;color:red;font-weight:400;background-position:100% 100%;quotes:&quot;«&quot; &quot;»&quot;;background:linear-gradient(180deg,#ffe500,#ffe500 50%,#121 0,#121);min-width:0&#125; CSSNext CSS4 很快就会到来，它会带来一些新的特性，包括本地变量、自定义媒体查询、自定义的选择器 和新的pseudo-links。虽然写本文的时候 CSS4 还没有被所有浏览器支持，不过它被批准后肯定会被最新的浏览器支持的。 CSSNext 可以把所有 CSS4 特性转换成浏览器可以识别的 CSS3 代码。这个工具可以单独使用，也可以作为 PostCSS 的一个插件。我们可以将其加到 processorsArray，这个数组包含了其他的 PostCSS 插件。 reduced calc()1234567:root &#123; --fontSize: 1rem;&#125;h1 &#123; font-size: calc(var(--fontSize) * 2);&#125; media queries ranges12345678910@media (width &gt;= 500px) and (width &lt;= 1200px) &#123; /* your styles */&#125;/* or coupled with custom media queries */@custom-media --only-medium-screen (width &gt;= 500px) and (width &lt;= 1200px);@media (--only-medium-screen) &#123; /* your styles */&#125; image-set() function12345.foo &#123; background-image: image-set(url(img/test.png) 1x, url(img/test-2x.png) 2x, url(my-img-print.png) 600dpi);&#125;","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://bowiego.github.io/tags/技术/"},{"name":"笔记","slug":"笔记","permalink":"http://bowiego.github.io/tags/笔记/"}]},{"title":"Linux命令行笔记","slug":"Linux命令行笔记","date":"2016-09-02T05:30:53.000Z","updated":"2016-10-21T01:24:06.000Z","comments":true,"path":"2016/09/02/Linux命令行笔记/","link":"","permalink":"http://bowiego.github.io/2016/09/02/Linux命令行笔记/","excerpt":"","text":"一、网络相关 1、查看某端口号被哪些程序占用。 sudo lsof -n -P| grep :8080 2、pkill命令可以按照进程名杀死进程。 语法 pkill(选项)(参数) 选项 -o：仅向找到的最小（起始）进程号发送信号； -n：仅向找到的最大（结束）进程号发送信号； -P：指定父进程号发送信号； -g：指定进程组； -t：指定开启进程的终端。 参数 进程名称：指定要查找的进程名称，同时也支持类似grep指令中的匹配模式。 实例 pgrep -l gaim 2979 gaim pkill gaim //杀死ngnix进程 pkill -9 nginx 来自: http://man.linuxde.net/pkill 二、其它 1、blablabla","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://bowiego.github.io/tags/技术/"},{"name":"笔记","slug":"笔记","permalink":"http://bowiego.github.io/tags/笔记/"}]},{"title":"MacOS下搭建react native的本地开发环境","slug":"MacOS下搭建react native的本地开发环境","date":"2016-09-02T05:30:53.000Z","updated":"2016-09-04T06:03:51.000Z","comments":true,"path":"2016/09/02/MacOS下搭建react native的本地开发环境/","link":"","permalink":"http://bowiego.github.io/2016/09/02/MacOS下搭建react native的本地开发环境/","excerpt":"一、准备工作 1、把系统升级到最新（-_-#，防止后面遇上突如其来的坑）。 2、下载最新版的Xcode，Xcode是开发iOS app的必备武器。 输入命令 xcode-select --install 建议安装完后重启系统，保证本地变量的正确性。 Read More…","text":"一、准备工作 1、把系统升级到最新（-_-#，防止后面遇上突如其来的坑）。 2、下载最新版的Xcode，Xcode是开发iOS app的必备武器。 输入命令 xcode-select --install 建议安装完后重启系统，保证本地变量的正确性。 Read More… 二、安装工具 1、安装homebrew，Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件(如后面的watchman和flow)。 /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 2、安装Watchman和Flow。 Watchman是facebook的一个开源项目，它开源用来监视文件并且记录文件的改动情况。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。 brew install watchman Flow是JavaScript的静态类型检查器，用于找出JavaScript代码中的类型错误。(你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）)。 brew install flow 建议不仅仅安装这两个，可以一次安装如下一些常用的工具。 brew install watchman flow git gcc pkg-config cairo libpng jpeg gitlib mongodb 3、安装Nodejs，建议用nvm安装。nvm的详细使用方法可以参考官方Git页。先安装nvm curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.7/install.sh | bash 然后就能通过nvm安装Nodejs nvm install 4.2.3 建议安装为本地默认版本 nvm alias default 4.2.3 如果遇到 -bash: nvm: command not found 应该是本地的nvm路径变量在脚本中生效有问题。解决办法如下： cd ~ 然后分别创建文件.bash_profile，.bashrc，.profile，.zshrc，如下面代码所示： touch .bash_profile 分别打开这几个文件，如： open -e .bash_profile 将如下代码粘贴到这几个文件中保存即可。 export NVM_DIR=”$HOME/.nvm”[ -s “$NVM_DIR/nvm.sh” ] &amp;&amp; . “$NVM_DIR/nvm.sh” # This loads nvm 然后手动source .bash_profile或者电脑重启一下应该就可以用nvm了。 检查node版本: node -v 检查npm版本: npm -v 安装淘宝源cnpm: sudo npm install cnpm -g 再次检查一下Xcode是否安装，以及是否是最新版本： xcode-select --install 三、测试尝鲜 安装脚手架，搭建初始项目结构：安装最新版： cnpm install -g react-native-cli 安装特定版本： cnpm install -g react-native-cli@0.1.10 -g 查看版本号： react-native -v 在本地目录下初始化项目： react-native init myFirstApp 一般intalling阶段会很慢甚至不成功。这时候可以手动来进行项目的初始化。 1.设置npm镜像 $ npm config set registry https://registry.npm.taobao.org $ npm config set disturl https://npm.taobao.org/dist 2.创建项目目录 $ mkdir myFirstApp $ cd myFirstApp 3.创建package.json，安装react-native依赖 $ npm init $ npm install --save react-native 4.初始化react-native项目 $ node -e &quot;require(&apos;react-native/local-cli/cli&apos;).init(&apos;.&apos;,&apos;myFirstApp&apos;)&quot; 运行app项目，2种方式：（1）命令行运行 cd myFirstApp react-native run-ios react-native run-android （2）Xcode下运行，输入打开当前目录 open . 打开ios目录下的.xcodeproj文件，选择设备，点击运行按钮 （模拟器快捷键：调整窗口大小 command＋1／2／3／4；模拟器的Home键 Command+Shift+H；调出双指拖动效果 Option+Shift；调出双指放大缩小效果 Option；切换横竖屏 Cmd+向左箭头/向右箭头。）（模拟器置顶设置：Window-Stay in Front）","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://bowiego.github.io/tags/技术/"},{"name":"笔记","slug":"笔记","permalink":"http://bowiego.github.io/tags/笔记/"}]},{"title":"MacOS下用Hexo+Github搭建个人博客","slug":"MacOS下用Hexo+Github搭建个人博客","date":"2016-06-30T05:30:53.000Z","updated":"2016-07-01T13:07:53.000Z","comments":true,"path":"2016/06/30/MacOS下用Hexo+Github搭建个人博客/","link":"","permalink":"http://bowiego.github.io/2016/06/30/MacOS下用Hexo+Github搭建个人博客/","excerpt":"几个月前就有搭建个人博客的想法，当时一头雾水，用WordPress比较专业，但是要花钱买域名，虽然不贵，但是能省则省。。。于是纠结用jekyll还是Hexo来搭建。扫了一下各自提供的主题，还是Hexo的好看！一拍脑袋就是Hexo了。也就是当时建了我的第一个Github账号。。。可是，Hexo的使用需要依赖Git之外，还有node。那是还用的Windows,安装各种麻烦，遇到了一些问题也没解决。后来为了抓紧学习前端基础也就暂时搁置了。现在有了MacOS安装各种依赖组件实在是太方便啦！！ 废话不多说，下面就开始搭建的基本流程吧！ Read More…","text":"几个月前就有搭建个人博客的想法，当时一头雾水，用WordPress比较专业，但是要花钱买域名，虽然不贵，但是能省则省。。。于是纠结用jekyll还是Hexo来搭建。扫了一下各自提供的主题，还是Hexo的好看！一拍脑袋就是Hexo了。也就是当时建了我的第一个Github账号。。。可是，Hexo的使用需要依赖Git之外，还有node。那是还用的Windows,安装各种麻烦，遇到了一些问题也没解决。后来为了抓紧学习前端基础也就暂时搁置了。现在有了MacOS安装各种依赖组件实在是太方便啦！！ 废话不多说，下面就开始搭建的基本流程吧！ Read More… 一、配置环境 先看看Hexo的官方文档下的说明 https://hexo.io/docs/index.html这时我们知道Hexo需要配置以下两个环境：Node.js 和 Git Node到Node.js官网下载相应平台的最新版本，一路安装即可。 Git(装有Xcode的话就自带Git喽) 二、安装Hexo 先创建自己本地放置博客文件的目录，这里作为示范将文件夹起名为‘BLOG’，目录为 Documents/BLOG， 终端输入命令切换阿里的node源(非必需，但是切换后安装速度大大增快) $ npm --registry=https://registry.npm.taobao.org install koa $ npm --registry=https://registry.npm.taobao.org install cnpm -g 终端打开本地’BLOG’目录 $ cd Documents/BLOG (后面的目录太长的话可以直接将文件夹拖入终端窗口) 安装Hexo $ sudo npm install -g hexo-cli 或 $ sudo cnpm install -g hexo-cli (切换为阿里源就将npm改为cnpm) 初始化Hexo $ hexo init 这时候就能在BLOG本地目录下看到如下的目录结构 ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes 生成静态页面 $ hexo generate（hexo g也可以） 本地启动启动本地服务，进行文章预览调试，命令： $ hexo server 浏览器输入 http://localhost:4000 就可以预览了！要关闭服务器就在终端按下‘ctrl+c’ 三、部署到Github 先配置Github，建立Respository，以 your_user_name.github.io 格式为名称创建仓库。现在我们需要修改BLOG本地目录下的_config.yml文件，来建立关联。翻到最下面，改成如下这样子的 deploy: type: git repo: https://github.com/bowiego/bowiego.github.io.git (这里改为你自己的Git目录) branch: master 然后执行命令： $ npm install hexo-deployer-git --save 这时候执行deploy来向Git推送本地文件 $ hexo deploy 现在打开 http://bowiego.github.io/ (改为你自己的Git账户)就能发现Git Page已和本地文件同步。 以后每次修改本地文件之后按以下步骤命令重新部署就可以了。 $ hexo clean (本地清除cache文件db.json并重新生成public文件夹) $ hexo generate (生成静态页面文件) $ hexo deploy (推送到Git)","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://bowiego.github.io/tags/技术/"},{"name":"笔记","slug":"笔记","permalink":"http://bowiego.github.io/tags/笔记/"},{"name":"博客","slug":"博客","permalink":"http://bowiego.github.io/tags/博客/"}]},{"title":"2016魔都电影节之行(草稿)","slug":"2016魔都电影节之行","date":"2016-06-20T04:58:36.000Z","updated":"2016-09-02T14:36:24.000Z","comments":true,"path":"2016/06/20/2016魔都电影节之行/","link":"","permalink":"http://bowiego.github.io/2016/06/20/2016魔都电影节之行/","excerpt":"5月的时候，就开始在网上被2016年SIFF的相关信息刷屏，突然就想去凑个热闹，感觉也是自然而然萌生的念头。当年才喜欢上日影的时候，就听说过SIFF有很多日片放映，当时就特别向往一窥。不过由于个人时间安排问题，以及当时电影节的购票、赶场服务还不是很方便。这个冲动也就只能一直留在了脑海之中了。现在无锡到上海1个小时，还能见见老朋友，何乐而不为呢。 Read More…","text":"5月的时候，就开始在网上被2016年SIFF的相关信息刷屏，突然就想去凑个热闹，感觉也是自然而然萌生的念头。当年才喜欢上日影的时候，就听说过SIFF有很多日片放映，当时就特别向往一窥。不过由于个人时间安排问题，以及当时电影节的购票、赶场服务还不是很方便。这个冲动也就只能一直留在了脑海之中了。现在无锡到上海1个小时，还能见见老朋友，何乐而不为呢。 Read More… 抢票去年的淘宝购票据说还是比较坑爹的，界面很不人性化不说，连基本的买票都很难买到，服务器各种崩。今年淘宝电影依旧是主办方唯一指定购票渠道，但是改名为淘票票了，似有一雪前耻度的决心。官方片单公布之时，下好了淘票票的APP，专题下多了个日程安排，每次的地点时间，赶场次之间的时间间隔也都自动帮你设定好了，非常清楚，顿时觉得非常人性化，无比赞啊～立马对照片单，列了一堆想看的片。摩拳擦掌等开票日。开票日前天晚上定好了早上8点前的闹钟，只为能抢到心仪的票。可是现实让我一脸懵逼。开票的一个多小时之内，APP还是浏览器端所有场次的电影都刷不出购票界面。到了差不多中午才真正可以买票，期间官方一度关闭了购票窗口，没有任何的声明和解释，也是醉了。到能买到时候，最想看的片全被卖光了😢。扣掉媒体记者，组委会评委一干人，看来托关系，第三方预留占去的票不少啊。哎，最后真正留给影迷朋友的也没多少。别说那些热门和超热门了。当时抢票的时候，拿手机的手都是发抖的，激动之下一口气买了5张，要是给我请一个礼拜的假，我得买个十几张才过瘾吧。 下面是片单：《着魔》－－波兰导演安德烈·祖拉斯基的经典恐怖片，女神阿佳妮为此奉献了生涯最癫狂，变态，大尺度的表演，轻松拿下当年戛纳电影节和凯撒奖双料影后。《最后一课》－－北影节天坛奖入围，法国老牌知性女演员桑德里娜·伯奈尔主演。《伤心往事》－－小泉今日子和二阶堂富美母女档，加上高良健吾，到场的迷妹也不少。电影节公映早于日本国内哦，东京艺术院线70周年纪念作品，其实看演员就行了。《史蒂夫·乔布斯》－－丹尼·鲍尔去年上映的申奥片，评价两极。《火星异种》－－对漫改不是很感冒，看着三池崇史的份上，凑个数吧。 赶场这次5场电影院都不同，第一天晚上南京西路的大光明，比较老牌的影院了，布置和设施都很有氛围。第二场陆家嘴，ifc商场内的百丽宫，商场很高大上，影院到真的挺难找的。然后是虹桥那边的的凌空SOHO。再到交大旁的SFC上影，也是这次SIFF的主要影院之一，比人烟稀少的前两个气氛好多了。最后一个我发现在奥特莱斯的时候就知道很偏远了，坐着公交车走了好远。。。 短评 着魔blablabla~ 最后一课blablabla~ 伤心往事blablabla~ 乔布斯blablabla~ 火星异种blablabla~","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://bowiego.github.io/tags/生活/"},{"name":"电影","slug":"电影","permalink":"http://bowiego.github.io/tags/电影/"}]}]}