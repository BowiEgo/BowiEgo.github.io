<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bowiego的啵客儿</title>
  <subtitle>龟速建设ing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bowiego.github.io/"/>
  <updated>2017-08-09T15:44:15.000Z</updated>
  <id>http://bowiego.github.io/</id>
  
  <author>
    <name>Bowiego &quot;啵一哥&quot;</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PostCSS简介</title>
    <link href="http://bowiego.github.io/2017/08/09/PostCSS/"/>
    <id>http://bowiego.github.io/2017/08/09/PostCSS/</id>
    <published>2017-08-09T12:30:53.000Z</published>
    <updated>2017-08-09T15:44:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;1、什么是PostCSS (A tool for transforming CSS with JavaScript)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostCSS 本身是一个功能比较单一的工具。它提供了一种方式用 JavaScript 代码来处理 CSS。它负责把 CSS 代码解析成抽象语法树结构（Abstract Syntax Tree，AST），再交由插件来进行处理。插件基于 CSS 代码的 AST 所能进行的操作是多种多样的，比如可以支持变量和混入（mixin），增加浏览器相关的声明前缀，或是把使用将来的 CSS 规范的样式规则转译（transpile）成当前的 CSS 规范支持的格式。从这个角度来说，PostCSS 的强大之处在于其不断发展的插件体系。目前 PostCSS 已经有 200 多个功能各异的插件。开发人员也可以根据项目的需要，开发出自己的 PostCSS 插件。&lt;/p&gt;
&lt;p&gt;PostCSS 从其诞生之时就带来了社区对其类别划分的争议。这主要是由于其名称中的 post，很容易让人联想到 PostCSS 是用来做 CSS 后处理（post-processor）的，从而与已有的 CSS 预处理（pre-processor）语言，如 SASS 和 LESS 等进行类比。实际上，PostCSS 的主要功能只有两个：第一个就是前面提到的把 CSS 解析成 JavaScript 可以操作的 AST，第二个就是调用插件来处理 AST 并得到结果。因此，不能简单的把 PostCSS 归类成 CSS 预处理或后处理工具。PostCSS 所能执行的任务非常多，同时涵盖了传统意义上的预处理和后处理。&lt;/p&gt;
&lt;p&gt;如果你喜欢使用PostCSS，但又不想抛弃你最喜欢的预处理器。不用担心，你不需要作出二选一的选择，你可以把PostCSS和预处理器(Sass、Stylus或LESS)结合起来使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;2、为什么要用PostCSS&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多样化的功能插件，创建了一个生态的插件系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据你需要的特性进行模块化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;快速编译&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建自己的插件，且具可访问性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以像普通的CSS一样使用它&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不依赖于任何预处理器就具备创建一个库的能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以与许多流行工具构建无缝部署&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;3、webpack设置&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install postcss-loader -D
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;webpack &amp;gt;3.0版本貌似不需要在配置文件中配置postcss的loader了，而是直接生效。也许是postcss新版的功能，但是官方文档没有说明，这点注意。&lt;/p&gt;
&lt;p&gt;之后会在项目根目录下多处一个.postcssrc.js文件，以后在该文件中修改postcss配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;module.exports = {
 &amp;quot;plugins&amp;quot;: {
   &amp;quot;autoprefixer&amp;quot;: {
      browsers: [&amp;apos;last 2 versions&amp;apos;, &amp;apos;ie 6-8&amp;apos;, &amp;apos;Firefox &amp;gt; 20&amp;apos;]
   },
   &amp;quot;postcss-px-to-viewport&amp;quot;: {
      viewportWidth: 750,
      viewportHeight: 1334,
      unitPrecision: 5,
      viewportUnit: &amp;apos;vw&amp;apos;,
      selectorBlackList: [],
      minPixelValue: 1,
      mediaQuery: false
     }
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;strong&gt;&lt;em&gt;2、PostCSS插件&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostCSS的核心就是它的插件系统。目前，PostCSS已经拥有200多个插件可供选择，官方的Github上有一个&lt;a href=&quot;https://github.com/postcss/postcss#plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;插件仓库&lt;/a&gt;,其主页维护了插件列表。这个插件列表会经常更新，所以说这个地方是一个相当可靠的地方，可以看到插件的发展，在哪方面可用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面列举一些常用的插件：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Autoprefixer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据CanIUse.com数据对属性自动添加浏览器的私有前缀.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;npm install autoprefixer -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;input:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:fullscreen a {
  display: flex
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:-webkit-full-screen a {
  display: -webkit-box;
  display: flex
}
:-moz-full-screen a {
  display: flex
}
:-ms-fullscreen a {
  display: -ms-flexbox;
  display: flex
}
:fullscreen a {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ben-eb/cssnano&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;cssnano&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模块化的CSS压缩器,它提供了一个非常强大的CSS优化的插件包cssnano，这个插件包是一个可以即插即用的。它汇集了大约25个插件，只需要执行一个命令，就可以做多方面不同类型的优化。它包括：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;删除空格和最后一个分号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除注释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化字体权重&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;丢弃重复的样式规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化calc()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;压缩选择器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;减少手写属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并规则&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install cssnano -D&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;before:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/* normalize selectors */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;h1::before, h1:before &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /* reduce shorthand even further */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  margin: 10px 20px 10px 20px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /* reduce color values */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  color: #ff0000;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /* remove duplicated properties */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font-weight: 400;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font-weight: 400;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /* reduce position values */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  background-position: bottom right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /* normalize wrapping quotes */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  quotes: &amp;apos;«&amp;apos; &amp;quot;»&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /* reduce gradient parameters */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  background: linear-gradient(to bottom, #ffe500 0%, #ffe500 50%, #121 50%, #121 100%);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /* replace initial values */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  min-width: initial;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/* correct invalid placement */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@charset &amp;quot;utf-8&amp;quot;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;after:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@charset &amp;quot;utf-8&amp;quot;;h1:before&amp;#123;margin:10px 20px;color:red;font-weight:400;background-position:100% 100%;quotes:&amp;quot;«&amp;quot; &amp;quot;»&amp;quot;;background:linear-gradient(180deg,#ffe500,#ffe500 50%,#121 0,#121);min-width:0&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MoOx/postcss-cssnext&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;CSSNext&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CSS4 很快就会到来，它会带来一些新的特性，包括本地变量、自定义媒体查询、自定义的选择器 和新的pseudo-links。虽然写本文的时候 CSS4 还没有被所有浏览器支持，不过它被批准后肯定会被最新的浏览器支持的。&lt;/p&gt;
&lt;p&gt;CSSNext 可以把所有 CSS4 特性转换成浏览器可以识别的 CSS3 代码。这个工具可以单独使用，也可以作为 PostCSS 的一个插件。我们可以将其加到 processorsArray，这个数组包含了其他的 PostCSS 插件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;reduced calc()&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;:root &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --fontSize: 1rem;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;h1 &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font-size: calc(var(--fontSize) * 2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;media queries ranges&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@media (width &amp;gt;= 500px) and (width &amp;lt;= 1200px) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /* your styles */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/* or coupled with custom media queries */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@custom-media --only-medium-screen (width &amp;gt;= 500px) and (width &amp;lt;= 1200px);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@media (--only-medium-screen) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /* your styles */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;image-set() function&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.foo &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  background-image: image-set(url(img/test.png) 1x,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                              url(img/test-2x.png) 2x,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                              url(my-img-print.png) 600dpi);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;1、什么是PostCSS (A tool for transforming CSS with JavaScript)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostCSS 本身是一个功能比较单一的工具。它提供了一种方式用
    
    </summary>
    
    
      <category term="技术" scheme="http://bowiego.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="笔记" scheme="http://bowiego.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令行笔记</title>
    <link href="http://bowiego.github.io/2016/09/02/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AC%94%E8%AE%B0/"/>
    <id>http://bowiego.github.io/2016/09/02/Linux命令行笔记/</id>
    <published>2016-09-02T05:30:53.000Z</published>
    <updated>2016-10-21T01:24:06.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt; 一、网络相关 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 1、查看某端口号被哪些程序占用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo lsof -n -P| grep :8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 2、pkill命令可以按照进程名杀死进程。&lt;br&gt; &lt;strong&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pkill(选项)(参数) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;strong&gt;&lt;strong&gt;选项&lt;/strong&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-o：仅向找到的最小（起始）进程号发送信号； 
-n：仅向找到的最大（结束）进程号发送信号； 
-P：指定父进程号发送信号； 
-g：指定进程组； 
-t：指定开启进程的终端。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;strong&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;进程名称：指定要查找的进程名称，同时也支持类似grep指令中的匹配模式。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;strong&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pgrep -l gaim 
2979 gaim 
pkill gaim

//杀死ngnix进程
pkill -9 nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;来自: &lt;a href=&quot;http://man.linuxde.net/pkill&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://man.linuxde.net/pkill&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt; 二、其它 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 1、blablabla&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 一、网络相关 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 1、查看某端口号被哪些程序占用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo lsof -n -P| grep :8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 2、pkill命令可以按照进程名杀死进程。&lt;br&gt; 
    
    </summary>
    
    
      <category term="技术" scheme="http://bowiego.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="笔记" scheme="http://bowiego.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下搭建react native的本地开发环境</title>
    <link href="http://bowiego.github.io/2016/09/02/MacOS%E4%B8%8B%E6%90%AD%E5%BB%BAreact%20native%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://bowiego.github.io/2016/09/02/MacOS下搭建react native的本地开发环境/</id>
    <published>2016-09-02T05:30:53.000Z</published>
    <updated>2016-09-04T06:03:51.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt; 一、准备工作 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 1、把系统升级到最新（-_-#，防止后面遇上突如其来的坑）。&lt;br&gt; 2、下载最新版的Xcode，Xcode是开发iOS app的必备武器。&lt;br&gt; 输入命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 建议安装完后重启系统，保证本地变量的正确性。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2016/09/02/MacOS下搭建react native的本地开发环境/&quot;&gt;Read More…&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt; 二、安装工具 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 1、安装homebrew，Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件(如后面的watchman和flow)。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 2、安装Watchman和Flow。&lt;br&gt; Watchman是facebook的一个开源项目，它开源用来监视文件并且记录文件的改动情况。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install watchman
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Flow是JavaScript的静态类型检查器，用于找出JavaScript代码中的类型错误。(你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）)。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install flow
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;建议不仅仅安装这两个，可以一次安装如下一些常用的工具。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install watchman flow git gcc pkg-config cairo libpng jpeg gitlib mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、安装Nodejs，建议用nvm安装。nvm的详细使用方法可以参考&lt;a href=&quot;https://github.com/creationix/nvm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方Git页&lt;/a&gt;。&lt;br&gt;先安装nvm&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.7/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后就能通过nvm安装Nodejs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nvm install 4.2.3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;建议安装为本地默认版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nvm alias default 4.2.3    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果遇到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-bash: nvm: command not found
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;应该是本地的nvm路径变量在脚本中生效有问题。解决办法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后分别创建文件.bash_profile，.bashrc，.profile，.zshrc，如下面代码所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch .bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分别打开这几个文件，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;open -e .bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将如下代码粘贴到这几个文件中保存即可。&lt;br&gt;    export NVM_DIR=”$HOME/.nvm”&lt;br&gt;[ -s “$NVM_DIR/nvm.sh” ] &amp;amp;&amp;amp; . “$NVM_DIR/nvm.sh” # This loads nvm&lt;/p&gt;
&lt;p&gt;然后手动source .bash_profile或者电脑重启一下应该就可以用nvm了。&lt;/p&gt;
&lt;p&gt;检查node版本:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node -v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检查npm版本:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm -v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装淘宝源cnpm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo npm install cnpm -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次检查一下Xcode是否安装，以及是否是最新版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt; 三、测试尝鲜 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装脚手架，搭建初始项目结构：&lt;br&gt;安装最新版：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cnpm install -g react-native-cli
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装特定版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cnpm install -g react-native-cli@0.1.10 -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看版本号：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;react-native -v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在本地目录下初始化项目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;react-native init myFirstApp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般intalling阶段会很慢甚至不成功。这时候可以手动来进行项目的初始化。&lt;/p&gt;
&lt;p&gt;1.设置npm镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm config set registry https://registry.npm.taobao.org
$ npm config set disturl https://npm.taobao.org/dist
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.创建项目目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir myFirstApp
$ cd myFirstApp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.创建package.json，安装react-native依赖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm init
$ npm install --save react-native
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.初始化react-native项目&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node -e &amp;quot;require(&amp;apos;react-native/local-cli/cli&amp;apos;).init(&amp;apos;.&amp;apos;,&amp;apos;myFirstApp&amp;apos;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行app项目，2种方式：&lt;br&gt;（1）命令行运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd myFirstApp
react-native run-ios    
react-native run-android
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（2）Xcode下运行，输入打开当前目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;open .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打开ios目录下的.xcodeproj文件，选择设备，点击运行按钮&lt;/p&gt;
&lt;p&gt;（模拟器快捷键：调整窗口大小  command＋1／2／3／4；模拟器的Home键  Command+Shift+H；调出双指拖动效果 Option+Shift；调出双指放大缩小效果  Option；切换横竖屏  Cmd+向左箭头/向右箭头。）&lt;br&gt;（模拟器置顶设置：Window-Stay in Front）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 一、准备工作 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 1、把系统升级到最新（-_-#，防止后面遇上突如其来的坑）。&lt;br&gt; 2、下载最新版的Xcode，Xcode是开发iOS app的必备武器。&lt;br&gt; 输入命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 建议安装完后重启系统，保证本地变量的正确性。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2016/09/02/MacOS下搭建react native的本地开发环境/&quot;&gt;Read More…&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://bowiego.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="笔记" scheme="http://bowiego.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下用Hexo+Github搭建个人博客</title>
    <link href="http://bowiego.github.io/2016/06/30/MacOS%E4%B8%8B%E7%94%A8Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://bowiego.github.io/2016/06/30/MacOS下用Hexo+Github搭建个人博客/</id>
    <published>2016-06-30T05:30:53.000Z</published>
    <updated>2016-07-01T13:07:53.000Z</updated>
    
    <content type="html">&lt;p&gt;几个月前就有搭建个人博客的想法，当时一头雾水，用WordPress比较专业，但是要花钱买域名，虽然不贵，但是能省则省。。。于是纠结用jekyll还是Hexo来搭建。扫了一下各自提供的主题，还是Hexo的好看！一拍脑袋就是Hexo了。也就是当时建了我的第一个Github账号。。。可是，Hexo的使用需要依赖Git之外，还有node。那是还用的Windows,安装各种麻烦，遇到了一些问题也没解决。后来为了抓紧学习前端基础也就暂时搁置了。现在有了MacOS安装各种依赖组件实在是太方便啦！！&lt;/p&gt;
&lt;p&gt;废话不多说，下面就开始搭建的基本流程吧！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2016/06/30/MacOS下用Hexo+Github搭建个人博客/&quot;&gt;Read More…&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 一、配置环境 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先看看Hexo的官方文档下的说明 &lt;a href=&quot;https://hexo.io/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/docs/index.html&lt;/a&gt;&lt;br&gt;这时我们知道Hexo需要配置以下两个环境：Node.js  和  Git&lt;/p&gt;
&lt;p&gt;Node&lt;br&gt;到Node.js官网下载相应平台的最新版本，一路安装即可。&lt;/p&gt;
&lt;p&gt;Git(装有Xcode的话就自带Git喽)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 二、安装Hexo &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先创建自己本地放置博客文件的目录，这里作为示范将文件夹起名为‘BLOG’，目录为 Documents/BLOG，&lt;/p&gt;
&lt;p&gt;终端输入命令切换阿里的node源(非必需，但是切换后安装速度大大增快)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm --registry=https://registry.npm.taobao.org install koa
$ npm --registry=https://registry.npm.taobao.org install cnpm -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;终端打开本地’BLOG’目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd Documents/BLOG  (后面的目录太长的话可以直接将文件夹拖入终端窗口) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装Hexo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo npm install -g hexo-cli 或 $ sudo cnpm install -g hexo-cli (切换为阿里源就将npm改为cnpm)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;初始化Hexo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候就能在BLOG本地目录下看到如下的目录结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成静态页面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo generate（hexo g也可以）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本地启动&lt;br&gt;启动本地服务，进行文章预览调试，命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;浏览器输入 &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt; 就可以预览了！要关闭服务器就在终端按下‘ctrl+c’&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 三、部署到Github &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先配置Github，建立Respository，以 your_user_name.github.io 格式为名称创建仓库。&lt;br&gt;现在我们需要修改BLOG本地目录下的_config.yml文件，来建立关联。&lt;br&gt;翻到最下面，改成如下这样子的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy: 
  type: git
  repo: https://github.com/bowiego/bowiego.github.io.git  (这里改为你自己的Git目录)
  branch: master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后执行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install hexo-deployer-git --save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候执行deploy来向Git推送本地文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在打开 &lt;a href=&quot;http://bowiego.github.io/&quot;&gt;http://bowiego.github.io/&lt;/a&gt; (改为你自己的Git账户)就能发现Git Page已和本地文件同步。&lt;/p&gt;
&lt;p&gt;以后每次修改本地文件之后按以下步骤命令重新部署就可以了。&lt;br&gt;    $ hexo clean  (本地清除cache文件db.json并重新生成public文件夹)&lt;br&gt;    $ hexo generate (生成静态页面文件)&lt;br&gt;    $ hexo deploy (推送到Git)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;几个月前就有搭建个人博客的想法，当时一头雾水，用WordPress比较专业，但是要花钱买域名，虽然不贵，但是能省则省。。。于是纠结用jekyll还是Hexo来搭建。扫了一下各自提供的主题，还是Hexo的好看！一拍脑袋就是Hexo了。也就是当时建了我的第一个Github账号。。。可是，Hexo的使用需要依赖Git之外，还有node。那是还用的Windows,安装各种麻烦，遇到了一些问题也没解决。后来为了抓紧学习前端基础也就暂时搁置了。现在有了MacOS安装各种依赖组件实在是太方便啦！！&lt;/p&gt;
&lt;p&gt;废话不多说，下面就开始搭建的基本流程吧！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2016/06/30/MacOS下用Hexo+Github搭建个人博客/&quot;&gt;Read More…&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://bowiego.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="笔记" scheme="http://bowiego.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="博客" scheme="http://bowiego.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>2016魔都电影节之行(草稿)</title>
    <link href="http://bowiego.github.io/2016/06/20/2016%E9%AD%94%E9%83%BD%E7%94%B5%E5%BD%B1%E8%8A%82%E4%B9%8B%E8%A1%8C/"/>
    <id>http://bowiego.github.io/2016/06/20/2016魔都电影节之行/</id>
    <published>2016-06-20T04:58:36.000Z</published>
    <updated>2016-09-02T14:36:24.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://o9kkuebr4.bkt.clouddn.com/blog/siff2016201604011616211174.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5月的时候，就开始在网上被2016年SIFF的相关信息刷屏，突然就想去凑个热闹，感觉也是自然而然萌生的念头。当年才喜欢上日影的时候，就听说过SIFF有很多日片放映，当时就特别向往一窥。不过由于个人时间安排问题，以及当时电影节的购票、赶场服务还不是很方便。这个冲动也就只能一直留在了脑海之中了。现在无锡到上海1个小时，还能见见老朋友，何乐而不为呢。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2016/06/20/2016魔都电影节之行/&quot;&gt;Read More…&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;抢票&lt;/strong&gt;&lt;br&gt;去年的淘宝购票据说还是比较坑爹的，界面很不人性化不说，连基本的买票都很难买到，服务器各种崩。今年淘宝电影依旧是主办方唯一指定购票渠道，但是改名为淘票票了，似有一雪前耻度的决心。官方片单公布之时，下好了淘票票的APP，专题下多了个日程安排，每次的地点时间，赶场次之间的时间间隔也都自动帮你设定好了，非常清楚，顿时觉得非常人性化，无比赞啊～立马对照片单，列了一堆想看的片。摩拳擦掌等开票日。&lt;br&gt;开票日前天晚上定好了早上8点前的闹钟，只为能抢到心仪的票。可是现实让我一脸懵逼。开票的一个多小时之内，APP还是浏览器端所有场次的电影都刷不出购票界面。到了差不多中午才真正可以买票，期间官方一度关闭了购票窗口，没有任何的声明和解释，也是醉了。到能买到时候，最想看的片全被卖光了😢。扣掉媒体记者，组委会评委一干人，看来托关系，第三方预留占去的票不少啊。哎，最后真正留给影迷朋友的也没多少。别说那些热门和超热门了。&lt;br&gt;当时抢票的时候，拿手机的手都是发抖的，激动之下一口气买了5张，要是给我请一个礼拜的假，我得买个十几张才过瘾吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9kkuebr4.bkt.clouddn.com/blog/siff20162.pic.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;下面是片单：&lt;br&gt;《着魔》－－波兰导演安德烈·祖拉斯基的经典恐怖片，女神阿佳妮为此奉献了生涯最癫狂，变态，大尺度的表演，轻松拿下当年戛纳电影节和凯撒奖双料影后。&lt;br&gt;《最后一课》－－北影节天坛奖入围，法国老牌知性女演员桑德里娜·伯奈尔主演。&lt;br&gt;《伤心往事》－－小泉今日子和二阶堂富美母女档，加上高良健吾，到场的迷妹也不少。电影节公映早于日本国内哦，东京艺术院线70周年纪念作品，其实看演员就行了。&lt;br&gt;《史蒂夫·乔布斯》－－丹尼·鲍尔去年上映的申奥片，评价两极。&lt;br&gt;《火星异种》－－对漫改不是很感冒，看着三池崇史的份上，凑个数吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9kkuebr4.bkt.clouddn.com/blog/siff20163.pic.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;赶场&lt;/strong&gt;&lt;br&gt;这次5场电影院都不同，第一天晚上南京西路的大光明，比较老牌的影院了，布置和设施都很有氛围。第二场陆家嘴，ifc商场内的百丽宫，商场很高大上，影院到真的挺难找的。然后是虹桥那边的的凌空SOHO。再到交大旁的SFC上影，也是这次SIFF的主要影院之一，比人烟稀少的前两个气氛好多了。最后一个我发现在奥特莱斯的时候就知道很偏远了，坐着公交车走了好远。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9kkuebr4.bkt.clouddn.com/blog/siff20161.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;短评&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;着魔&quot;&gt;&lt;a href=&quot;#着魔&quot; class=&quot;headerlink&quot; title=&quot;着魔&quot;&gt;&lt;/a&gt;&lt;a name=&quot;fenced-code-block&quot; style=&quot;font-size: 15px;&quot;&gt;着魔&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;blablabla~&lt;/p&gt;
&lt;h4 id=&quot;最后一课&quot;&gt;&lt;a href=&quot;#最后一课&quot; class=&quot;headerlink&quot; title=&quot;最后一课&quot;&gt;&lt;/a&gt;&lt;a name=&quot;fenced-code-block&quot; style=&quot;font-size: 15px;&quot;&gt;最后一课&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;blablabla~&lt;/p&gt;
&lt;h4 id=&quot;伤心往事&quot;&gt;&lt;a href=&quot;#伤心往事&quot; class=&quot;headerlink&quot; title=&quot;伤心往事&quot;&gt;&lt;/a&gt;&lt;a name=&quot;fenced-code-block&quot; style=&quot;font-size: 15px;&quot;&gt;伤心往事&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;blablabla~&lt;/p&gt;
&lt;h4 id=&quot;乔布斯&quot;&gt;&lt;a href=&quot;#乔布斯&quot; class=&quot;headerlink&quot; title=&quot;乔布斯&quot;&gt;&lt;/a&gt;&lt;a name=&quot;fenced-code-block&quot; style=&quot;font-size: 15px;&quot;&gt;乔布斯&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;blablabla~&lt;/p&gt;
&lt;h4 id=&quot;火星异种&quot;&gt;&lt;a href=&quot;#火星异种&quot; class=&quot;headerlink&quot; title=&quot;火星异种&quot;&gt;&lt;/a&gt;&lt;a name=&quot;fenced-code-block&quot; style=&quot;font-size: 15px;&quot;&gt;火星异种&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;blablabla~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9kkuebr4.bkt.clouddn.com/blog/siff2016201604011616211174.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5月的时候，就开始在网上被2016年SIFF的相关信息刷屏，突然就想去凑个热闹，感觉也是自然而然萌生的念头。当年才喜欢上日影的时候，就听说过SIFF有很多日片放映，当时就特别向往一窥。不过由于个人时间安排问题，以及当时电影节的购票、赶场服务还不是很方便。这个冲动也就只能一直留在了脑海之中了。现在无锡到上海1个小时，还能见见老朋友，何乐而不为呢。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2016/06/20/2016魔都电影节之行/&quot;&gt;Read More…&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://bowiego.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="电影" scheme="http://bowiego.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
</feed>
